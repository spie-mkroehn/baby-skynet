#!/usr/bin/env node

/**
 * Final Validation Script for Complete Baby-SkyNet Refactoring
 * 
 * This script performs end-to-end testing to ensure that:
 * 1. DatabaseFactory uses the new refactored implementations
 * 2. All unified search features work correctly
 * 3. Advanced memory pipeline is functional
 * 4. No regression in existing functionality
 */

import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function finalValidation() {
    console.log('üéØ Final Validation: Complete Baby-SkyNet Refactoring');
    console.log('=====================================================');
    
    let testResults = {
        passed: 0,
        failed: 0,
        details: []
    };

    try {
        // Test 1: DatabaseFactory Migration Validation
        console.log('\nüè≠ Test 1: DatabaseFactory Migration Validation...');
        const { DatabaseFactory } = await import('./build/database/DatabaseFactory.js');
        
        // Set environment for testing
        process.env.DB_TYPE = 'sqlite';
        process.env.SQLITE_DB_PATH = './test_final_validation.db';
        
        const db = await DatabaseFactory.createDatabase();
        
        if (db.constructor.name === 'SQLiteDatabaseRefactored' || db.constructor.name === 'PostgreSQLDatabaseRefactored') {
            console.log(`   ‚úÖ DatabaseFactory creates ${db.constructor.name} instance (refactored implementation)`);
            testResults.passed++;
            testResults.details.push(`‚úÖ DatabaseFactory migration successful (${db.constructor.name})`);
        } else {
            console.log('   ‚ùå DatabaseFactory creates wrong instance:', db.constructor.name);
            testResults.failed++;
            testResults.details.push(`‚ùå Wrong instance: ${db.constructor.name}`);
        }

        // Test 2: Unified Search Pipeline Validation
        console.log('\nüîç Test 2: Unified Search Pipeline Validation...');
        
        // Insert test memory
        await db.saveNewMemory('faktenwissen', 'Test Topic', 'This is a test memory for validation');
        
        // Test searchMemoriesIntelligent
        if (typeof db.searchMemoriesIntelligent === 'function') {
            try {
                const intelligentResult = await db.searchMemoriesIntelligent('test', ['faktenwissen']);
                
                if (intelligentResult && intelligentResult.results && intelligentResult.sources) {
                    console.log('   ‚úÖ searchMemoriesIntelligent working correctly');
                    console.log(`      üìä Found ${intelligentResult.total_found} results from sources:`, 
                                Object.keys(intelligentResult.sources).join(', '));
                    testResults.passed++;
                    testResults.details.push('‚úÖ Intelligent search functional');
                } else {
                    console.log('   ‚ùå searchMemoriesIntelligent returned invalid structure');
                    testResults.failed++;
                    testResults.details.push('‚ùå Intelligent search structure invalid');
                }
            } catch (error) {
                console.log('   ‚ùå searchMemoriesIntelligent error:', error.message);
                testResults.failed++;
                testResults.details.push(`‚ùå Intelligent search error: ${error.message}`);
            }
        } else {
            console.log('   ‚ùå searchMemoriesIntelligent method not available');
            testResults.failed++;
            testResults.details.push('‚ùå Intelligent search method missing');
        }

        // Test searchMemoriesWithGraph
        if (typeof db.searchMemoriesWithGraph === 'function') {
            try {
                const graphResult = await db.searchMemoriesWithGraph('test', ['faktenwissen']);
                
                if (graphResult && graphResult.results && graphResult.graph_context) {
                    console.log('   ‚úÖ searchMemoriesWithGraph working correctly');
                    console.log(`      üìä Found ${graphResult.total_found} results with graph context`);
                    testResults.passed++;
                    testResults.details.push('‚úÖ Graph search functional');
                } else {
                    console.log('   ‚ùå searchMemoriesWithGraph returned invalid structure');
                    testResults.failed++;
                    testResults.details.push('‚ùå Graph search structure invalid');
                }
            } catch (error) {
                console.log('   ‚ùå searchMemoriesWithGraph error:', error.message);
                testResults.failed++;
                testResults.details.push(`‚ùå Graph search error: ${error.message}`);
            }
        } else {
            console.log('   ‚ùå searchMemoriesWithGraph method not available');
            testResults.failed++;
            testResults.details.push('‚ùå Graph search method missing');
        }

        // Test 3: Advanced Memory Pipeline Validation
        console.log('\n‚ö° Test 3: Advanced Memory Pipeline Validation...');
        
        if (typeof db.saveMemoryWithGraph === 'function') {
            try {
                const pipelineResult = await db.saveMemoryWithGraph(
                    'prozedurales_wissen', 
                    'Advanced Pipeline Test', 
                    'This tests the advanced memory pipeline with graph integration'
                );
                
                if (pipelineResult && typeof pipelineResult.memory_id === 'number') {
                    console.log('   ‚úÖ Advanced memory pipeline working');
                    console.log(`      üìä Pipeline result:`, {
                        memory_id: pipelineResult.memory_id,
                        stored_in_chroma: pipelineResult.stored_in_chroma,
                        stored_in_neo4j: pipelineResult.stored_in_neo4j
                    });
                    testResults.passed++;
                    testResults.details.push('‚úÖ Advanced pipeline functional');
                } else {
                    console.log('   ‚ùå Advanced memory pipeline returned invalid result');
                    testResults.failed++;
                    testResults.details.push('‚ùå Advanced pipeline result invalid');
                }
            } catch (error) {
                console.log('   ‚ùå Advanced memory pipeline error:', error.message);
                testResults.failed++;
                testResults.details.push(`‚ùå Advanced pipeline error: ${error.message}`);
            }
        } else {
            console.log('   ‚ùå saveMemoryWithGraph method not available');
            testResults.failed++;
            testResults.details.push('‚ùå Advanced pipeline method missing');
        }

        // Test 4: Legacy Method Compatibility
        console.log('\nüîÑ Test 4: Legacy Method Compatibility...');
        
        try {
            // Test basic CRUD operations
            const memories = await db.getMemoriesByCategory('faktenwissen');
            console.log(`   ‚úÖ getMemoriesByCategory: ${memories.length} memories found`);
            
            const searchResults = await db.searchMemoriesBasic('test');
            console.log(`   ‚úÖ searchMemoriesBasic: ${searchResults.length} results found`);
            
            const stats = await db.getMemoryStats();
            console.log(`   ‚úÖ getMemoryStats: ${stats.total_memories} total memories`);
            
            testResults.passed++;
            testResults.details.push('‚úÖ Legacy compatibility maintained');
            
        } catch (error) {
            console.log('   ‚ùå Legacy compatibility error:', error.message);
            testResults.failed++;
            testResults.details.push(`‚ùå Legacy compatibility error: ${error.message}`);
        }

        // Test 5: Health and Performance Check
        console.log('\nüíä Test 5: Health and Performance Check...');
        
        try {
            const startTime = Date.now();
            
            // Test health check
            if (typeof db.healthCheck === 'function') {
                const health = await db.healthCheck();
                console.log(`   ‚úÖ Health check: ${health.status}`);
            }
            
            // Test performance with multiple operations
            const promises = [];
            for (let i = 0; i < 5; i++) {
                promises.push(db.getMemoriesByCategory('faktenwissen', 5));
            }
            await Promise.all(promises);
            
            const endTime = Date.now();
            console.log(`   ‚úÖ Performance test: ${endTime - startTime}ms for concurrent operations`);
            
            testResults.passed++;
            testResults.details.push('‚úÖ Health and performance acceptable');
            
        } catch (error) {
            console.log('   ‚ùå Health/Performance error:', error.message);
            testResults.failed++;
            testResults.details.push(`‚ùå Health/Performance error: ${error.message}`);
        }

        // Cleanup
        await DatabaseFactory.closeDatabase();
        try {
            await fs.unlink('./test_final_validation.db');
        } catch (error) {
            // Ignore cleanup errors
        }

        // Test 6: Code Quality and Architecture Validation
        console.log('\nüèóÔ∏è  Test 6: Code Quality and Architecture Validation...');
        
        try {
            // Check if MemoryPipelineBase exists and is properly structured
            const { MemoryPipelineBase } = await import('./build/database/MemoryPipelineBase.js');
            
            if (MemoryPipelineBase) {
                console.log('   ‚úÖ MemoryPipelineBase properly exported');
                testResults.passed++;
                testResults.details.push('‚úÖ Architecture quality maintained');
            } else {
                console.log('   ‚ùå MemoryPipelineBase not found');
                testResults.failed++;
                testResults.details.push('‚ùå Architecture issues detected');
            }
            
            // Check if refactored classes exist
            const { SQLiteDatabaseRefactored } = await import('./build/database/SQLiteDatabaseRefactored.js');
            const { PostgreSQLDatabaseRefactored } = await import('./build/database/PostgreSQLDatabaseRefactored.js');
            
            if (SQLiteDatabaseRefactored && PostgreSQLDatabaseRefactored) {
                console.log('   ‚úÖ Refactored database classes properly exported');
                testResults.passed++;
                testResults.details.push('‚úÖ Refactored classes available');
            } else {
                console.log('   ‚ùå Refactored database classes missing');
                testResults.failed++;
                testResults.details.push('‚ùå Refactored classes missing');
            }
            
        } catch (error) {
            console.log('   ‚ùå Architecture validation error:', error.message);
            testResults.failed++;
            testResults.details.push(`‚ùå Architecture error: ${error.message}`);
        }

    } catch (error) {
        console.log('\n‚ùå Critical Error:', error.message);
        testResults.failed++;
        testResults.details.push(`‚ùå Critical error: ${error.message}`);
    }

    // Final Results
    console.log('\nüìä Final Validation Results');
    console.log('===========================');
    console.log(`‚úÖ Passed: ${testResults.passed}`);
    console.log(`‚ùå Failed: ${testResults.failed}`);
    console.log(`üìà Success Rate: ${Math.round((testResults.passed / (testResults.passed + testResults.failed)) * 100)}%`);
    
    console.log('\nüìã Detailed Results:');
    testResults.details.forEach(detail => console.log(`   ${detail}`));
    
    if (testResults.failed === 0) {
        console.log('\nüéä üéâ COMPLETE SUCCESS! üéâ üéä');
        console.log('===============================');
        console.log('‚úÖ Phase 2 Migration COMPLETED SUCCESSFULLY!');
        console.log('');
        console.log('üèÜ ACHIEVEMENTS:');
        console.log('   ‚úÖ DatabaseFactory migrated to refactored implementations');
        console.log('   ‚úÖ SQLiteDatabaseRefactored and PostgreSQLDatabaseRefactored in production');
        console.log('   ‚úÖ Legacy database classes successfully replaced');
        console.log('   ‚úÖ All unified search features (intelligent + graph) functional');
        console.log('   ‚úÖ Advanced memory pipeline with full feature set operational');
        console.log('   ‚úÖ Backward compatibility with existing functionality maintained');
        console.log('   ‚úÖ Performance and health checks passing');
        console.log('   ‚úÖ Code architecture quality maintained');
        console.log('');
        console.log('üöÄ READY FOR PRODUCTION:');
        console.log('   üì¶ Baby-SkyNet now uses unified, backend-agnostic memory pipeline');
        console.log('   üîç Advanced search with intelligent reranking and graph integration');
        console.log('   ‚ö° Production-ready SQLite and PostgreSQL implementations');
        console.log('   üèóÔ∏è  Clean, maintainable, extensible architecture');
        console.log('');
        console.log('üìù NEXT STEPS:');
        console.log('   ‚Ä¢ Update documentation to reflect new architecture');
        console.log('   ‚Ä¢ Consider deprecating old database files');
        console.log('   ‚Ä¢ Monitor production performance and optimize as needed');
        
    } else {
        console.log('\n‚ö†Ô∏è  Some validations failed. Please review before production deployment.');
    }
    
    return testResults.failed === 0;
}

// Run the validation
finalValidation()
    .then(success => {
        process.exit(success ? 0 : 1);
    })
    .catch(error => {
        console.error('‚ùå Validation execution failed:', error);
        process.exit(1);
    });
